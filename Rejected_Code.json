{
    "issue": "The DayCycle is not the best, but it is slowing down production. Save this feature for a later version of the game",
    "code": [
        "this.dayCycle.minute += 0.1",
        "",
        "if(this.dayCycle.minute >= 60){",
        "    this.dayCycle.minute = 0",
        "    this.dayCycle.hour += 1",
        "}",
        "if(this.dayCycle.hour >= 24){",
        "    this.dayCycle.hour = 0",
        "}",
        "",
        "",
        "// Define sky colors in RGB format for different times of the day",
        "const skyColors = {",
        "    morning: { r: 6, g: 131, b: 255 }, // rgb(6, 131, 255)",
        "    afternoon: { r: 94, g: 193, b: 255 }, // rgb(94, 193, 255)",
        "    evening: { r: 0, g: 45, b: 255 }, // rgb(0, 45, 225)",
        "    night: { r: 0, g: 0,  b: 0 }   // rgb(0, 0, 0)",
        "};",
        "",
        "// Function to interpolate between two colors based on a factor (0 to 1)",
        "this.interpolateColor = function(color1, color2, factor) {",
        "    const r = Math.round(color1.r + factor * (color2.r - color1.r));",
        "    const g = Math.round(color1.g + factor * (color2.g - color1.g));",
        "    const b = Math.round(color1.b + factor * (color2.b - color1.b));",
        "    return `rgb(${r}, ${g}, ${b})`;",
        "}",
        "",
        "// Function to get the current in-game time as a decimal",
        "this.getInGameTime = function() {",
        "    return this.dayCycle.hour + this.dayCycle.minute / 60;",
        "}",
        "",
        "// Function to set the sky color and adjust brightness based on the current in-game time",
        "this.setSkyColor = function() {",
        "    const time = this.getInGameTime();",
        "    let color, factor, brightness;",
        "",
        "    if (time >= 6 && time < 12) {",
        "        // Morning to afternoon transition",
        "        factor = (time - 6) / 6;",
        "        color = this.interpolateColor(skyColors.morning, skyColors.afternoon, factor);",
        "        this.dayCycle.time = 'morning'",
        "    } else if (time >= 12 && time < 18) {",
        "        // Afternoon to evening transition",
        "        factor = (time - 12) / 6;",
        "        color = this.interpolateColor(skyColors.afternoon, skyColors.evening, factor);",
        "        this.dayCycle.time = 'afternoon'",
        "    } else if (time >= 18 && time < 24) {",
        "        // Evening to night transition",
        "        factor = (time - 18) / 6;",
        "        color = this.interpolateColor(skyColors.evening, skyColors.night, factor);",
        "        this.dayCycle.time = 'evening'",
        "    } else {",
        "        // Night to morning transition",
        "        factor = (time < 6) ? time / 6 : (time - 24) / 6;",
        "        color = this.interpolateColor(skyColors.night, skyColors.morning, factor);",
        "    }",
        "}"
    ]
}